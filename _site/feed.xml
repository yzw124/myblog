<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>一个有态度的程序员</title>
        <description>不会摄影的程序员不是一个好厨师</description>
        <link>/</link>
        <atom:link href="/feed.xml" rel="self"
        type="application/rss+xml"/>
        <pubDate>Sun, 20 Mar 2016 00:43:11 +0800</pubDate>
        <lastBuildDate>Sun, 20 Mar 2016 00:43:11 +0800</lastBuildDate>
        <generator>Jekyll v3.0.3</generator>
        
        <item>
            <title>初识React Native</title>
            <description>&lt;h3 id=&quot;section&quot;&gt;基本架构&lt;/h3&gt;
&lt;p&gt;React Native（以下简称RN)是facebook在2015年推出的开源javascript框架，旨在通过js开发原生应用。RN主要解决的问题是native应用开发周期长、热更新困难（尤其是ios），而web应用用户体验不佳，人机交互不好、执行效率低下等问题。RN设计的理念就是既保留native的用户交互体验，又保留web的开发效率。让我们先来看一下，RN的基本架构
&lt;img src=&quot;https://raw.githubusercontent.com/yzw124/yzw124blog/gh-pages/img/react_architecture.png&quot; width=&quot;80%&quot; /&gt;  &lt;br /&gt;
从图中我们可以清楚的看到RN清楚的分为三层：&lt;br /&gt;
1. js:就是我们实际编码的地方。
2. virtual dom:这是一个轻量级的dom，在不同平台上有着不同的实现，可以认为是一个抽象层。
3. web／android／ios:目前3个平台的基本控件均已实现。&lt;/p&gt;

&lt;h3 id=&quot;webview&quot;&gt;与webview的区别&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;执行效率:与phonegap等h5使用webview容器技术不同的是，rn是通过抽象系统原生ui控件完成视图的渲染。因此，在执行效率上会大大的优于h5，对用户而言会有更好的交互体验。&lt;/li&gt;
  &lt;li&gt;ui展现:对于h5而且,一套代码基本上是可以同时在各个平台上跑的，也就是说可以做到write once，run ererywhere。而对于RN来说，这基本上是一件不太可能的事情，因为各个平台的交互习惯不同，比如你使用了一些dom才有的特性，或者android才有的控件，这些在ios上肯定是跑不了的。归根结底还是因为RN的设计的理念就是，learn once，write ererywher。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;rn&quot;&gt;RN的缺点&lt;/h3&gt;
&lt;p&gt;优点就不说了，主要来谈谈缺点。 &lt;br /&gt;
1. 最最最重要的一个问题，暂未发布正式版本，目前版本变动非常大，兼容性很差;
2. 无强大的IDE工具，调试比较麻烦;
3. 开发应用局限性还很大，目前不太适合开发纯RN应用;
4. 对于没有前端经验的我来说，学习成本还是蛮高的。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;目前主流使用方案&lt;/h3&gt;
&lt;p&gt;将易变的模块采用RN进行设计，讲需要动画展示，大量用户交互的界面还是通过native进行开发。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;福利时间&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yzw124/yzw124blog/gh-pages/img/mao2.png&quot; width=&quot;80%&quot; /&gt; 
&lt;img src=&quot;https://raw.githubusercontent.com/yzw124/yzw124blog/gh-pages/img/mao3.png&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

</description>
            <pubDate>Sat, 19 Mar 2016 19:11:11 +0800</pubDate>
            <link>#/2016/03/19/jira-advanced-search.html</link>
            <guid isPermaLink="true">#/2016/03/19/jira-advanced-search.html</guid>
            
            
        </item>
        
        <item>
            <title>如何高效的使用JIRA(一)</title>
            <description>&lt;h3 id=&quot;jira&quot;&gt;JIRA&lt;/h3&gt;
&lt;p&gt;JIRA是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。&lt;/p&gt;

&lt;p&gt;目前公司使用JIRA作为需求跟踪、bug追踪的工具，但是由于公司网速的问题，打开网页版的jira非常的慢，同时用网页打开JIRA很麻烦，所以能否有一个快捷的方式查看jira中的task呢？对于程序员来说最方便的方式就是能够在IDE工具中直接打开自己的Task.&lt;/p&gt;

&lt;h3 id=&quot;androidstudio&quot;&gt;AndroidStudio&lt;/h3&gt;
&lt;p&gt;AndroidStudio作为google主推的android开发工具，功能还是相当全面的，除了能够配置版本管理软件，当然也少不了配置任务管理软件的地方。
  如图所示打开点击Tools-&amp;gt;Tasks-&amp;gt;Configure Server即可以进入任务服务器的配置。&lt;br /&gt;
  &lt;img src=&quot;https://raw.githubusercontent.com/yzw124/blog_res/master/jira_jietu1.png&quot; width=&quot;80%&quot; /&gt;
  &lt;img src=&quot;https://raw.githubusercontent.com/yzw124/blog_res/master/jira_jietu2.png&quot; width=&quot;80%&quot; /&gt;&lt;br /&gt;
  从图中我们可以看到android studio 中集成市面上大部分的任务管理，bug追踪的软件。这里我们选择JIRA, 接着我们需要我们输入服务器地址，以及用户名密码。&lt;br /&gt;
  &lt;img src=&quot;https://raw.githubusercontent.com/yzw124/blog_res/master/jira_jietu3.png&quot; width=&quot;80%&quot; /&gt;&lt;br /&gt;
同时我们看到在第四行有一个search选项，大家看到一定觉得非常熟悉，实际上这个是Atlassian JQL语法，他和标准的sql非常相像，通过JQL我们可以完成对于JIRA的所有查询。关于JQL的详细用法将在后面的文章中进行介绍。&lt;br /&gt;
现在到了我们进行验证的时候，可以看到在android studio的右上角多了一个default task的选框, 点击default task-&amp;gt;open task，会看到直接出来我自己还没有完成的task。&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/yzw124/blog_res/master/jira_jietu4.png&quot; width=&quot;80%&quot; /&gt; &lt;br /&gt;
当然我们也可以直接在android studio对自己的task进行操作，点击具体的task，就能够进行操作了。&lt;br /&gt;
 &lt;img src=&quot;https://raw.githubusercontent.com/yzw124/blog_res/master/jira_jietu5.png&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;eclipse&quot;&gt;Eclipse&lt;/h3&gt;
&lt;p&gt;Eclipse中，jira是作为插件发布的。由于网上已经很多文章介绍了，所以就不在这赘述了，具体操作步骤参见: 
http://jingyan.baidu.com/article/acf728fd43ca89f8e510a3e6.html&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;福利时间&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://img.61gequ.com/allimg/2012-4/201241214113226220.jpg&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.61gequ.com/allimg/2012-4/201242413575821947.jpg &quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

</description>
            <pubDate>Thu, 03 Mar 2016 19:11:11 +0800</pubDate>
            <link>#/2016/03/03/jira-on-IDE.html</link>
            <guid isPermaLink="true">#/2016/03/03/jira-on-IDE.html</guid>
            
            
        </item>
        
        <item>
            <title>我想和这个世界谈谈</title>
            <description>&lt;h3 id=&quot;section&quot;&gt;关于博客&lt;/h3&gt;
&lt;p&gt;这是我第二次新建自己的博客，上一个部署在阿里云上，国内有一大堆的手续，麻烦的要死，就停掉了。又觉得csdn的界面太挫，实在不符合我这个文艺码农的情怀；简书的话又不能自己玩代码，不能满足我这颗geek的心。so，我在git上建了这个博客。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;为什么写博客&lt;/h3&gt;
&lt;p&gt;写博客的原因主要有这么几点，一是工作上发现总是需要查一些资料，总是google很麻烦，所以需要有一个地方把他整理出来，下次直接来自己的博客查就好了；二是工作几年时间，有一些技术上的经验总结，希望能够记录下来；三是希望通过写博客提高自己的写作水平。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;博客的内容主要有哪些&lt;/h3&gt;
&lt;p&gt;博客的内容主要是一些技术上的分享，同时也会有自己的一些人生感悟，以及一些股市的分析。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;博客的更新速度&lt;/h3&gt;
&lt;p&gt;博客每周一更，不在于速度，贵在坚持。&lt;/p&gt;
</description>
            <pubDate>Wed, 02 Mar 2016 19:11:11 +0800</pubDate>
            <link>#/2016/03/02/about-blog.html</link>
            <guid isPermaLink="true">#/2016/03/02/about-blog.html</guid>
            
            
        </item>
        
    </channel>
</rss>
